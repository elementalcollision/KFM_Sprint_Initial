{
  "debugger_run": "Run the graph with debugging enabled to track execution flow, state changes, and performance metrics.",
  "enable_logging": "Enable enhanced logging to capture detailed information about graph execution, node operations, and state transitions.",
  "enable_breakpoints": "Enable breakpoints to pause execution at specific nodes or when certain conditions are met, allowing inspection of the current state.",
  "enable_profiling": "Enable performance profiling to measure execution time, memory usage, and resource utilization for optimization.",
  "show_state_diff": "Show differences between states at different steps of execution to identify changes and track data flow.",
  "visualize_graph": "Generate a visual representation of the graph structure showing nodes, edges, and execution flow.",
  "show_execution_path": "Display the sequence of nodes traversed during graph execution with timing information.",
  "show_profile_report": "Display a comprehensive performance report showing execution times, memory usage, and optimization opportunities.",
  "add_breakpoint": "Add a breakpoint at a specific node or based on a condition to pause execution for debugging.",
  "show_state_history": "Display the history of states throughout graph execution to track changes over time.",
  "show_execution_timing": "Show timing information for each node in the graph, highlighting performance bottlenecks.",
  "show_memory_profile": "Display memory usage statistics throughout graph execution, showing memory growth and peak usage.",
  "visualize_state_timeline": "Generate a visual timeline of state changes during graph execution.",
  "visualize_execution_flow": "Create a visualization of the execution flow through the graph, highlighting paths taken.",
  "get_optimization_suggestions": "Get AI-powered suggestions for optimizing graph performance based on profiling data.",
  "configure_logging": "Configure logging settings including log level, output destinations, and formatting options.",
  "configure_state_tracking": "Configure state tracking options including history depth, paths to include/exclude, and diff settings.",
  "configure_profiling": "Configure profiling settings including profiling level, metrics to track, and reporting options.",
  "export_state_diff": "Export state differences to a file for offline analysis or sharing.",
  "export_execution_path": "Export the execution path to a file for documentation or analysis.",
  "export_profile_report": "Export the performance profile report to a file for sharing or record-keeping.",
  "run_benchmark": "Run performance benchmarks to compare different configurations or optimization strategies.",
  "get_error_context": "Get detailed context about an error including the node where it occurred, the state at the time, and suggestions for resolving it.",
  "detect_memory_leaks": "Analyze memory usage patterns to identify potential memory leaks in your graph.",
  "show_branch_analysis": "Analyze conditional branches in your graph to understand decision paths and optimization opportunities.",
  "show_loop_analysis": "Analyze loops in your graph execution to identify repetitive patterns and optimization opportunities.",
  "show_state_size_analysis": "Analyze the size and complexity of state to identify opportunities for optimization.",
  "visualize_performance_heatmap": "Generate a heatmap visualization highlighting performance hotspots in your graph.",
  "identify_bottlenecks": "Automatically identify performance bottlenecks in your graph based on execution time and resource usage.",
  "analyze_bottlenecks": "Get detailed analysis of identified bottlenecks including causes and potential solutions.",
  "register_custom_differ": "Register a custom differ for comparing specific types of objects in state diff visualization.",
  "register_analyzer": "Register a custom analyzer for specialized analysis of state or execution data.",
  "register_visualizer": "Register a custom visualizer for specialized visualization of state or execution data.",
  "register_formatter": "Register a custom formatter for specialized formatting of state or execution data.",
  "register_metric_tracker": "Register a custom metric tracker for monitoring application-specific metrics.",
  "register_plugin": "Register an integration plugin to connect the debugger to external tools and services.",
  "register_debug_command": "Register a custom debug command to extend the debugger's interactive interface.",
  "register_performance_metric": "Register a custom performance metric to track application-specific performance characteristics.",
  "register_error_recovery": "Register a custom error recovery strategy for specific nodes or error types.",
  "on_node_entry": "Register a callback function to be called when execution enters a node.",
  "on_node_exit": "Register a callback function to be called when execution exits a node.",
  "store_execution": "Store the current execution with an identifier for later comparison.",
  "compare_executions": "Compare two stored executions to identify differences in paths, timing, or state.",
  "get_execution_timing_data": "Get detailed timing data for graph execution for custom analysis.",
  "get_memory_profile": "Get detailed memory usage data for graph execution for custom analysis.",
  "get_state_diff_data": "Get structured data representing state differences for custom analysis.",
  "get_optimization_suggestions": "Get AI-powered suggestions for optimizing your graph based on profiling data.",
  "get_node_optimization_suggestions": "Get optimization suggestions for a specific node in your graph.",
  "get_structured_logs": "Get structured log data for programmatic analysis of execution.",
  "visualize_execution_heatmap": "Generate a heatmap visualization showing execution patterns in your graph.",
  "visualize_memory_usage": "Generate a visualization of memory usage throughout graph execution.",
  "visualize_node_comparison": "Generate a visualization comparing different nodes based on performance metrics.",
  "visualize_performance_timeline": "Generate a timeline visualization of performance metrics throughout execution.",
  "save_performance_baseline": "Save current performance metrics as a baseline for future comparison.",
  "compare_with_baseline": "Compare current performance metrics with a saved baseline to identify changes.",
  "find_biggest_state_change": "Identify the step with the largest state change during execution.",
  "show_aggregate_timing": "Show aggregate timing statistics across multiple executions.",
  "show_state_path_history": "Show the history of a specific path within the state throughout execution.",
  "show_state_size_timeline": "Show how state size changes throughout execution.",
  "show_help": "Show help information for the debugging tools.",
  "get_help": "Get help for a specific topic or feature.",
  "search_help": "Search for help topics matching a query.",
  "get_contextual_help": "Get contextual help based on the current debugging context.",
  "get_tooltip": "Get tooltip text for a UI element."
} 